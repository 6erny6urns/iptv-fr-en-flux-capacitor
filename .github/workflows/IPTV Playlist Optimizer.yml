name: IPTV Playlist Optimizer

on:
  # D√©clench√© manuellement
  workflow_dispatch:
    inputs:
      max_urls_per_channel:
        description: 'Nombre maximum d URLs par chaine'
        required: false
        default: '3'
        type: string
      max_workers:
        description: 'Nombre de workers paralleles'
        required: false
        default: '10'
        type: string
      
  # D√©clench√© automatiquement (optionnel)
  schedule:
    # Tous les jours √† 6h UTC (ajustez selon vos besoins)
    - cron: '0 6 * * *'
  
  # D√©clench√© sur push (optionnel)
  push:
    branches: [ main ]
    paths: 
      - 'data/channels_keywords.csv'
      - 'iptv_optimizer.py'
      - '.github/workflows/iptv-optimizer.yml'

jobs:
  optimize-playlist:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        # Recupere tout l historique pour pouvoir faire des commits
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests
        # Installer d autres dependances si necessaire
        
    - name: Create directories
      run: |
        mkdir -p m3u_sources
        mkdir -p data
        mkdir -p playlist
        mkdir -p logs
        
    - name: Download M3U sources (exemple)
      run: |
        # Remplacez ces URLs par vos vraies sources M3U
        # Ou uploadez vos fichiers M3U dans le dossier m3u_sources/
        echo "Telechargement des sources M3U..."
        
        # Exemple de telechargement (decommentez et adaptez)
        # curl -s "https://example.com/playlist1.m3u" -o m3u_sources/source1.m3u || true
        # curl -s "https://example.com/playlist2.m3u" -o m3u_sources/source2.m3u || true
        
        # Pour le moment, creer un fichier exemple si aucun fichier n existe
        if [ ! -f m3u_sources/*.m3u ]; then
          echo "#EXTM3U" > m3u_sources/example.m3u
          echo "#EXTINF:-1,Example Channel" >> m3u_sources/example.m3u
          echo "http://example.com/stream.m3u8" >> m3u_sources/example.m3u
        fi
        
        echo "Fichiers M3U disponibles:"
        ls -la m3u_sources/ || echo "Aucun fichier M3U trouve"
    
    - name: Create default channels CSV if missing
      run: |
        if [ ! -f data/channels_keywords.csv ]; then
          echo "Creation du fichier channels_keywords.csv par defaut..."
          cat > data/channels_keywords.csv << 'EOF'
        channel,keyword
        TF1,tf1|tf 1
        France 2,france2|france 2
        France 3,france3|france 3
        Canal+,canal+|canalplus|canal plus
        M6,m6
        Arte,arte
        C8,c8|d8
        W9,w9
        TMC,tmc
        TFX,tfx|nt1
        NRJ12,nrj12|nrj 12
        LCP,lcp|la chaine parlementaire
        France 4,france4|france 4
        BFM TV,bfm|bfmtv
        CNews,cnews|i-tele|itele
        Euronews,euronews
        France Info,franceinfo|france info
        LCI,lci
        France 24,france24|france 24
        TV5,tv5monde|tv5
        EOF
          echo "Fichier channels_keywords.csv cree avec des chaines francaises par defaut"
        fi
    
    - name: Run IPTV Optimizer
      run: |
        echo "Demarrage de l optimiseur IPTV..."
        python iptv_optimizer.py \
          --m3u-dir m3u_sources \
          --channels-csv data/channels_keywords.csv \
          --output playlist/playlist_filtered.m3u \
          --max-per-channel ${{ github.event.inputs.max_urls_per_channel || '3' }} \
          --workers ${{ github.event.inputs.max_workers || '10' }} \
          --verbose
          
    - name: Generate summary
      run: |
        echo "## üì∫ IPTV Playlist Optimizer - Rapport d execution" > summary.md
        echo "**Date:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> summary.md
        echo "**Commit:** ${{ github.sha }}" >> summary.md
        echo "" >> summary.md
        
        if [ -f playlist/playlist_filtered.m3u ]; then
          channels_count=$(grep -c "^#EXTINF" playlist/playlist_filtered.m3u || echo "0")
          urls_count=$(grep -c "^http" playlist/playlist_filtered.m3u || echo "0")
          file_size=$(du -h playlist/playlist_filtered.m3u | cut -f1)
          
          echo "### ‚úÖ Resultats" >> summary.md
          echo "- **Chaines trouvees:** $channels_count" >> summary.md
          echo "- **URLs valides:** $urls_count" >> summary.md  
          echo "- **Taille du fichier:** $file_size" >> summary.md
          echo "" >> summary.md
          
          echo "### üìã Apercu des chaines" >> summary.md
          echo '```' >> summary.md
          grep "^#EXTINF" playlist/playlist_filtered.m3u | head -10 | sed 's/#EXTINF:-1[^,]*,/- /' >> summary.md
          if [ $channels_count -gt 10 ]; then
            echo "... et $(($channels_count - 10)) autres chaines" >> summary.md
          fi
          echo '```' >> summary.md
        else
          echo "### ‚ùå Erreur" >> summary.md
          echo "Aucune playlist generee. Verifiez les logs." >> summary.md
        fi
        
        echo "" >> summary.md
        echo "### üìÅ Fichiers generes" >> summary.md
        echo '```' >> summary.md
        ls -la playlist/ logs/ 2>/dev/null || echo "Aucun fichier genere"
        echo '```' >> summary.md
        
        # Afficher le resume
        cat summary.md
        
    - name: Upload logs as artifact
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: iptv-optimizer-logs
        path: |
          iptv_optimizer.log
          summary.md
        retention-days: 30
        
    - name: Upload playlist as artifact
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: iptv-playlist
        path: playlist/
        retention-days: 90
    
    - name: Commit and push results (optionnel)
      if: success()
      run: |
        # Configurer Git
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Ajouter les fichiers generes
        git add playlist/playlist_filtered.m3u summary.md
        
        # Commit seulement s il y a des changements
        if ! git diff --staged --quiet; then
          git commit -m "üîÑ Mise √† jour playlist IPTV - $(date '+%Y-%m-%d %H:%M:%S')"
          git push
          echo "‚úÖ Playlist mise √† jour et committ√©e"
        else
          echo "‚ÑπÔ∏è  Aucun changement d√©tect√© dans la playlist"
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Job optionnel pour notifier en cas d echec
  notify-failure:
    needs: optimize-playlist
    runs-on: ubuntu-latest
    if: failure()
    steps:
    - name: Create failure issue
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: 'üö® IPTV Optimizer - Echec d execution',
            body: `## Details de l echec
            
            - **Workflow:** ${{ github.workflow }}
            - **Run ID:** ${{ github.run_id }}
            - **Commit:** ${{ github.sha }}
            - **Date:** ${new Date().toISOString()}
            
            Verifiez les logs dans les artifacts ou l onglet Actions.
            
            [Voir les details](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})`
          })
